import json
import logging
import requests
from flask import Blueprint, jsonify, request
from bson import ObjectId
from mongoengine import DoesNotExist

# Constants
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent"
GEMINI_API_KEY = "YOUR_GEMINI_API_KEY"  # Make sure to set this as an environment variable

# System Prompt for Gemini AI
system_prompt = """
You are Intern_india AI Assistant, specialized in recommending internships and generating interview prep material.
Analyze the user's resume and preferences against the available internship list.
Provide 3 best matching internships with detailed reasoning and preparation materials.
Format your response as valid JSON matching the provided schema.
"""

# Schema for Gemini API response
RECOMMENDATION_SCHEMA = {
    "type": "object",
    "properties": {
        "recommendations": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "internshipId": {"type": "string"},
                    "matchScore": {"type": "number"},
                    "reasoning": {"type": "string"},
                    "preparationMaterials": {
                        "type": "array",
                        "items": {"type": "string"}
                    }
                },
                "required": ["internshipId", "matchScore", "reasoning", "preparation Materials"]
            },
            "minItems": 1,
            "maxItems": 3
        },
        "appliedStatus": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "internshipId": {"type": "string"},
                    "status": {"type": "string", "enum": ["applied", "not_interested", "saved_for_later"]}
                },
                "required": ["internshipId", "status"]
            }
        }
    },
    "required": ["recommendations", "appliedStatus"]
}

def get_recommendations():
    """
    POST /api/allocation/recommend: Sends comprehensive user data to Gemini for analysis
    and returns personalized recommendations and prep material.
    """
    data = request.get_json()
    user_id = data.get('userId')
    applied_status = data.get('appliedStatus', [])

    if not user_id:
        return jsonify({"status": "error", "message": "Missing userId in request."}), 400
    if not GEMINI_API_KEY:
        return jsonify({"status": "error", "message": "Server configuration error: Gemini API Key missing."}), 500

    try:
        # 1. Fetch all necessary data from MongoDB
        context = fetch_all_context(user_id)
        
    except DoesNotExist:
        return jsonify({"status": "error", "message": "User ID or linked profile data not found in the database."}), 404
    except Exception as e:
        return jsonify({"status": "error", "message": f"Error preparing context data: {e}"}), 500

    # 2. Construct User Prompt
    user_query = f"""
    --- USER PROFILE ---
    Preferences: {json.dumps(context['preferences'])}
    Resume Analysis (If Available): {json.dumps(context['resume_analysis'] or "No analysis available. Base matching on preferences.")}
    Current Applied Status: {json.dumps(applied_status)}
    
    --- AVAILABLE INTERNSHIPS ---
    {json.dumps(context['all_internships'])}
    
    Please provide the 3 best recommendations and return the 'appliedStatus' list in the required JSON format.
    """
    
    payload = {
        "contents": [{"parts": [{"text": user_query}]}],
        "systemInstruction": {"parts": [{"text": system_prompt}]},
        "generationConfig": {
            "responseMimeType": "application/json",
            "responseSchema": RECOMMENDATION_SCHEMA,
            "temperature": 0.2
        }
    }

    # 3. Call Gemini API
    try:
        response = requests.post(f"{GEMINI_API_URL}?key={GEMINI_API_KEY}", 
                               headers={'Content-Type': 'application/json'}, 
                               data=json.dumps(payload))
        response.raise_for_status()

        gemini_result = response.json()
        json_string = gemini_result['candidates'][0]['content']['parts'][0]['text']
        final_recommendations = json.loads(json_string)

        return jsonify({
            "status": "success",
            "message": "Recommendations generated by Intern_india AI Assistant.",
            "data": final_recommendations
        }), 200

    except requests.exceptions.RequestException as e:
        logging.error(f"Gemini API Request Failed: {e}", exc_info=True)
        return jsonify({"status": "error", "message": "Failed to communicate with the Gemini API."}), 503
    except Exception as e:
        logging.error(f"Error processing Gemini response: {e}", exc_info=True)
        return jsonify({"status": "error", "message": "Failed to parse AI response."}), 500
